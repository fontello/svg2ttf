/*global it, describe*/
'use strict';


var assert  = require('assert');
var fs      = require('fs');
var path    = require('path');
var svg2ttf = require('../');
var opentype = require('opentype.js');

// Use opentype paser font
function parseFont(src, options) {
  var buffer = new Uint8Array(svg2ttf(src, options).buffer).buffer;
  return opentype.parse(buffer);
}

describe('svg2ttf', function () {
  var src = fs.readFileSync(path.join(__dirname, 'fixtures/test.svg'), 'utf-8');
  var dst = new Uint8Array(fs.readFileSync(path.join(__dirname, 'fixtures/test.ttf')));


  it('bin compare', function () {
    assert.deepEqual(new Uint8Array(svg2ttf(src, { ts: 1457357570703 }).buffer), dst);
  });


  describe('version', function () {

    it('should throw on bad version value', function () {
      assert.throws(function () {
        svg2ttf(src, { version: 123 });
      });
      assert.throws(function () {
        svg2ttf(src, { version: 'abc' });
      });
    });

    it('should set proper version', function () {
      var options;

      // Default version
      assert.equal('Version 1.0', parseFont(src).tables.name.version.en);

      options = { ts: 1457357570703, version: '1.0'};
      assert.equal('Version 1.0', parseFont(src, options).tables.name.version.en);

      options = { ts: 1457357570703, version: 'Version 1.0' };
      assert.equal('Version 1.0', parseFont(src, options).tables.name.version.en);

      options = { ts: 1457357570703, version: 'version 1.0' };
      assert.equal('Version 1.0', parseFont(src, options).tables.name.version.en);

      options = { ts: 1457357570703, version: 'version 2.0' };
      assert.equal('Version 2.0', parseFont(src, options).tables.name.version.en);
    });
  });

  describe('copyright', function () {
    it('should remove the whitespace before and after copyright', function () {
      var options;

      // Default copyright
      assert.equal('Copyright (C) 2016 by original authors @ fontello.com', parseFont(src).tables.name.copyright.en);

      options = { ts: 1457357570703, copyright: 'foo bar  '};
      assert.equal('foo bar', parseFont(src, options).tables.name.copyright.en);

      options = { ts: 1457357570703, copyright: '   foo bar   '};
      assert.equal('foo bar', parseFont(src, options).tables.name.copyright.en);

      options = { ts: 1457357570703, copyright: '\tFoo bar\n'};
      assert.equal('Foo bar', parseFont(src, options).tables.name.copyright.en);

      options = { ts: 1457357570703, copyright: '  Copyright (C) 2016 by original authors @ fontello.com\n'};
      assert.equal('Copyright (C) 2016 by original authors @ fontello.com', parseFont(src, options).tables.name.copyright.en);
    });
  });

  describe('should set proper description', function () {
    it('should remove the whitespace before and after copyright', function () {
      var options;

      // Default description
      assert.equal('Generated by svg2ttf from Fontello project.', parseFont(src).tables.name.description.en);

      options = {description: 'Generated by foo'};
      assert.equal('Generated by foo', parseFont(src, options).tables.name.description.en);
    });
  });

  describe('url', function () {
    it('should set proper url', function () {
      var options;

      // Default url
      assert.equal('http://fontello.com', parseFont(src).tables.name.manufacturerURL.en);

      options = {url: 'https://foo.com/'};
      assert.equal('https://foo.com/', parseFont(src, options).tables.name.manufacturerURL.en);

      options = {url: 'foo bar'};
      assert.equal('foo bar', parseFont(src, options).tables.name.manufacturerURL.en);
    });
  });

  describe('familyname', function () {
    it('should set proper familyname', function () {
      var options;

      // Default familyname
      assert.equal('fontello', parseFont(src).tables.name.fontFamily.en);

      options = {familyname: 'An icon font'};
      assert.equal('An icon font', parseFont(src, options).tables.name.fontFamily.en);
    });
  });

  describe('subfamilyname', function () {
    it('should set proper subfamilyname', function () {
      var options;

      // Default subfamilyname
      assert.equal('Regular', parseFont(src).tables.name.fontSubfamily.en);

      options = {subfamilyname: 'An icon font Regular'};
      assert.equal('An icon font Regular', parseFont(src, options).tables.name.fontSubfamily.en);
    });
  });

  describe('fullname', function () {
    it('should set proper fullname', function () {
      var options;

      // Default fullname
      assert.equal('fontello', parseFont(src).tables.name.fullName.en);

      options = {fullname: 'An icon font'};
      assert.equal('An icon font', parseFont(src, options).tables.name.fullName.en);
    });
  });

});
